// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// FCCSbehaviour
List FCCSbehaviour(DataFrame FCCSpropsSI, NumericVector MliveSI, NumericVector MdeadSI, double slope, double windSpeedSI);
RcppExport SEXP medfate_FCCSbehaviour(SEXP FCCSpropsSISEXP, SEXP MliveSISEXP, SEXP MdeadSISEXP, SEXP slopeSEXP, SEXP windSpeedSISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type FCCSpropsSI(FCCSpropsSISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MliveSI(MliveSISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MdeadSI(MdeadSISEXP);
    Rcpp::traits::input_parameter< double >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< double >::type windSpeedSI(windSpeedSISEXP);
    rcpp_result_gen = Rcpp::wrap(FCCSbehaviour(FCCSpropsSI, MliveSI, MdeadSI, slope, windSpeedSI));
    return rcpp_result_gen;
END_RCPP
}
// rothermel
List rothermel(String modeltype, NumericVector wSI, NumericVector sSI, double delta, double mx_dead, NumericVector hSI, NumericVector mSI, double u, double windDir, double slope, double aspect);
RcppExport SEXP medfate_rothermel(SEXP modeltypeSEXP, SEXP wSISEXP, SEXP sSISEXP, SEXP deltaSEXP, SEXP mx_deadSEXP, SEXP hSISEXP, SEXP mSISEXP, SEXP uSEXP, SEXP windDirSEXP, SEXP slopeSEXP, SEXP aspectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wSI(wSISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sSI(sSISEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type mx_dead(mx_deadSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hSI(hSISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mSI(mSISEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type windDir(windDirSEXP);
    Rcpp::traits::input_parameter< double >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< double >::type aspect(aspectSEXP);
    rcpp_result_gen = Rcpp::wrap(rothermel(modeltype, wSI, sSI, delta, mx_dead, hSI, mSI, u, windDir, slope, aspect));
    return rcpp_result_gen;
END_RCPP
}
// genros
double genros(double phi, double theta, double a1, double a2, double b, double n1, double n2, double c);
RcppExport SEXP medfate_genros(SEXP phiSEXP, SEXP thetaSEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP bSEXP, SEXP n1SEXP, SEXP n2SEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< double >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(genros(phi, theta, a1, a2, b, n1, n2, c));
    return rcpp_result_gen;
END_RCPP
}
// ellipseROS
NumericVector ellipseROS(NumericVector phi, double theta, double vws, double ros);
RcppExport SEXP medfate_ellipseROS(SEXP phiSEXP, SEXP thetaSEXP, SEXP vwsSEXP, SEXP rosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type vws(vwsSEXP);
    Rcpp::traits::input_parameter< double >::type ros(rosSEXP);
    rcpp_result_gen = Rcpp::wrap(ellipseROS(phi, theta, vws, ros));
    return rcpp_result_gen;
END_RCPP
}
// doubleEllipseROS
NumericVector doubleEllipseROS(NumericVector phi, double theta, double vws, double ros);
RcppExport SEXP medfate_doubleEllipseROS(SEXP phiSEXP, SEXP thetaSEXP, SEXP vwsSEXP, SEXP rosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type vws(vwsSEXP);
    Rcpp::traits::input_parameter< double >::type ros(rosSEXP);
    rcpp_result_gen = Rcpp::wrap(doubleEllipseROS(phi, theta, vws, ros));
    return rcpp_result_gen;
END_RCPP
}
// fireBrandFallingHeight
double fireBrandFallingHeight(double initialHeight, double timeFalling, double Dp);
RcppExport SEXP medfate_fireBrandFallingHeight(SEXP initialHeightSEXP, SEXP timeFallingSEXP, SEXP DpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type initialHeight(initialHeightSEXP);
    Rcpp::traits::input_parameter< double >::type timeFalling(timeFallingSEXP);
    Rcpp::traits::input_parameter< double >::type Dp(DpSEXP);
    rcpp_result_gen = Rcpp::wrap(fireBrandFallingHeight(initialHeight, timeFalling, Dp));
    return rcpp_result_gen;
END_RCPP
}
// totalFirebrandLoftingTime
double totalFirebrandLoftingTime(double z, double z0, double zF, double Dp);
RcppExport SEXP medfate_totalFirebrandLoftingTime(SEXP zSEXP, SEXP z0SEXP, SEXP zFSEXP, SEXP DpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< double >::type zF(zFSEXP);
    Rcpp::traits::input_parameter< double >::type Dp(DpSEXP);
    rcpp_result_gen = Rcpp::wrap(totalFirebrandLoftingTime(z, z0, zF, Dp));
    return rcpp_result_gen;
END_RCPP
}
// totalGasFlowPersistenceTime
double totalGasFlowPersistenceTime(double z, double t0, double zF);
RcppExport SEXP medfate_totalGasFlowPersistenceTime(SEXP zSEXP, SEXP t0SEXP, SEXP zFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< double >::type zF(zFSEXP);
    rcpp_result_gen = Rcpp::wrap(totalGasFlowPersistenceTime(z, t0, zF));
    return rcpp_result_gen;
END_RCPP
}
// findFireBrandLoftedHeight
double findFireBrandLoftedHeight(double t0, double z0, double zF, double Dp);
RcppExport SEXP medfate_findFireBrandLoftedHeight(SEXP t0SEXP, SEXP z0SEXP, SEXP zFSEXP, SEXP DpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< double >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< double >::type zF(zFSEXP);
    Rcpp::traits::input_parameter< double >::type Dp(DpSEXP);
    rcpp_result_gen = Rcpp::wrap(findFireBrandLoftedHeight(t0, z0, zF, Dp));
    return rcpp_result_gen;
END_RCPP
}
// willBurnWhenHitFloor
bool willBurnWhenHitFloor(double zIni, double Dp);
RcppExport SEXP medfate_willBurnWhenHitFloor(SEXP zIniSEXP, SEXP DpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zIni(zIniSEXP);
    Rcpp::traits::input_parameter< double >::type Dp(DpSEXP);
    rcpp_result_gen = Rcpp::wrap(willBurnWhenHitFloor(zIni, Dp));
    return rcpp_result_gen;
END_RCPP
}
// fireBrandBurningTimeFromCanopyStructure
double fireBrandBurningTimeFromCanopyStructure(double LAIc);
RcppExport SEXP medfate_fireBrandBurningTimeFromCanopyStructure(SEXP LAIcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type LAIc(LAIcSEXP);
    rcpp_result_gen = Rcpp::wrap(fireBrandBurningTimeFromCanopyStructure(LAIc));
    return rcpp_result_gen;
END_RCPP
}
// fireBrandFlameHeightFromCanopyStructure
double fireBrandFlameHeightFromCanopyStructure(double crownLength, double LAIc);
RcppExport SEXP medfate_fireBrandFlameHeightFromCanopyStructure(SEXP crownLengthSEXP, SEXP LAIcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type crownLength(crownLengthSEXP);
    Rcpp::traits::input_parameter< double >::type LAIc(LAIcSEXP);
    rcpp_result_gen = Rcpp::wrap(fireBrandFlameHeightFromCanopyStructure(crownLength, LAIc));
    return rcpp_result_gen;
END_RCPP
}
// criticalFirelineIntensity
double criticalFirelineIntensity(double CBH, double M);
RcppExport SEXP medfate_criticalFirelineIntensity(SEXP CBHSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type CBH(CBHSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(criticalFirelineIntensity(CBH, M));
    return rcpp_result_gen;
END_RCPP
}
// checkSpeciesParameters
void checkSpeciesParameters(DataFrame SpParams, CharacterVector params);
RcppExport SEXP medfate_checkSpeciesParameters(SEXP SpParamsSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type params(paramsSEXP);
    checkSpeciesParameters(SpParams, params);
    return R_NilValue;
END_RCPP
}
// conicRS
NumericMatrix conicRS(NumericVector Z, NumericVector d);
RcppExport SEXP medfate_conicRS(SEXP ZSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(conicRS(Z, d));
    return rcpp_result_gen;
END_RCPP
}
// ldrRS
NumericMatrix ldrRS(NumericVector Z50, NumericVector Z95, NumericVector d);
RcppExport SEXP medfate_ldrRS(SEXP Z50SEXP, SEXP Z95SEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Z50(Z50SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Z95(Z95SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(ldrRS(Z50, Z95, d));
    return rcpp_result_gen;
END_RCPP
}
// ldrProfile
NumericMatrix ldrProfile(NumericVector Z50, NumericVector Z95, NumericVector d);
RcppExport SEXP medfate_ldrProfile(SEXP Z50SEXP, SEXP Z95SEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Z50(Z50SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Z95(Z95SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(ldrProfile(Z50, Z95, d));
    return rcpp_result_gen;
END_RCPP
}
// cohortParameter
NumericVector cohortParameter(List x, DataFrame SpParams, String parName);
RcppExport SEXP medfate_cohortParameter(SEXP xSEXP, SEXP SpParamsSEXP, SEXP parNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< String >::type parName(parNameSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortParameter(x, SpParams, parName));
    return rcpp_result_gen;
END_RCPP
}
// cohortCharacterParameter
CharacterVector cohortCharacterParameter(List x, DataFrame SpParams, String parName);
RcppExport SEXP medfate_cohortCharacterParameter(SEXP xSEXP, SEXP SpParamsSEXP, SEXP parNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< String >::type parName(parNameSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortCharacterParameter(x, SpParams, parName));
    return rcpp_result_gen;
END_RCPP
}
// cohortSpecies
IntegerVector cohortSpecies(List x);
RcppExport SEXP medfate_cohortSpecies(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortSpecies(x));
    return rcpp_result_gen;
END_RCPP
}
// cohortSpeciesName
CharacterVector cohortSpeciesName(List x, DataFrame SpParams);
RcppExport SEXP medfate_cohortSpeciesName(SEXP xSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortSpeciesName(x, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// treeBasalArea
NumericVector treeBasalArea(NumericVector N, NumericVector dbh);
RcppExport SEXP medfate_treeBasalArea(SEXP NSEXP, SEXP dbhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dbh(dbhSEXP);
    rcpp_result_gen = Rcpp::wrap(treeBasalArea(N, dbh));
    return rcpp_result_gen;
END_RCPP
}
// cohortBasalArea
NumericVector cohortBasalArea(List x);
RcppExport SEXP medfate_cohortBasalArea(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortBasalArea(x));
    return rcpp_result_gen;
END_RCPP
}
// speciesBasalArea
NumericVector speciesBasalArea(List x, DataFrame SpParams);
RcppExport SEXP medfate_speciesBasalArea(SEXP xSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(speciesBasalArea(x, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// cohortLargerTreeBasalArea
NumericVector cohortLargerTreeBasalArea(List x);
RcppExport SEXP medfate_cohortLargerTreeBasalArea(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortLargerTreeBasalArea(x));
    return rcpp_result_gen;
END_RCPP
}
// forestBasalArea
double forestBasalArea(List x);
RcppExport SEXP medfate_forestBasalArea(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forestBasalArea(x));
    return rcpp_result_gen;
END_RCPP
}
// cohortDensity
NumericVector cohortDensity(List x);
RcppExport SEXP medfate_cohortDensity(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortDensity(x));
    return rcpp_result_gen;
END_RCPP
}
// cohortHeight
NumericVector cohortHeight(List x);
RcppExport SEXP medfate_cohortHeight(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortHeight(x));
    return rcpp_result_gen;
END_RCPP
}
// shrubCrownRatio
NumericVector shrubCrownRatio(IntegerVector SP, DataFrame SpParams);
RcppExport SEXP medfate_shrubCrownRatio(SEXP SPSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(shrubCrownRatio(SP, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// cohortCrownRatio
NumericVector cohortCrownRatio(List x, DataFrame SpParams);
RcppExport SEXP medfate_cohortCrownRatio(SEXP xSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortCrownRatio(x, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// cohortCrownBaseHeight
NumericVector cohortCrownBaseHeight(List x, DataFrame SpParams);
RcppExport SEXP medfate_cohortCrownBaseHeight(SEXP xSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortCrownBaseHeight(x, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// cohortCrownLength
NumericVector cohortCrownLength(List x, DataFrame SpParams);
RcppExport SEXP medfate_cohortCrownLength(SEXP xSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortCrownLength(x, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// treeFoliarBiomass
NumericVector treeFoliarBiomass(IntegerVector SP, NumericVector N, NumericVector dbh, DataFrame SpParams, double gdd);
RcppExport SEXP medfate_treeFoliarBiomass(SEXP SPSEXP, SEXP NSEXP, SEXP dbhSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(treeFoliarBiomass(SP, N, dbh, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// shrubFoliarBiomass
NumericVector shrubFoliarBiomass(IntegerVector SP, NumericVector Cover, NumericVector H, NumericVector CR, DataFrame SpParams, double gdd);
RcppExport SEXP medfate_shrubFoliarBiomass(SEXP SPSEXP, SEXP CoverSEXP, SEXP HSEXP, SEXP CRSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cover(CoverSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(shrubFoliarBiomass(SP, Cover, H, CR, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// cohortFoliarBiomass
NumericVector cohortFoliarBiomass(List x, DataFrame SpParams, double gdd);
RcppExport SEXP medfate_cohortFoliarBiomass(SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortFoliarBiomass(x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// shrubCover
double shrubCover(List x, double excludeMinHeight);
RcppExport SEXP medfate_shrubCover(SEXP xSEXP, SEXP excludeMinHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type excludeMinHeight(excludeMinHeightSEXP);
    rcpp_result_gen = Rcpp::wrap(shrubCover(x, excludeMinHeight));
    return rcpp_result_gen;
END_RCPP
}
// cohortCover
NumericVector cohortCover(List x);
RcppExport SEXP medfate_cohortCover(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortCover(x));
    return rcpp_result_gen;
END_RCPP
}
// shrubCrownPhytovolume
NumericVector shrubCrownPhytovolume(IntegerVector SP, NumericVector Cover, NumericVector H, NumericVector CR, DataFrame SpParams);
RcppExport SEXP medfate_shrubCrownPhytovolume(SEXP SPSEXP, SEXP CoverSEXP, SEXP HSEXP, SEXP CRSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cover(CoverSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(shrubCrownPhytovolume(SP, Cover, H, CR, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// cohortPhytovolume
NumericVector cohortPhytovolume(List x, DataFrame SpParams);
RcppExport SEXP medfate_cohortPhytovolume(SEXP xSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortPhytovolume(x, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// treeFuel
NumericVector treeFuel(IntegerVector SP, NumericVector N, NumericVector dbh, DataFrame SpParams, double gdd, bool includeDead);
RcppExport SEXP medfate_treeFuel(SEXP SPSEXP, SEXP NSEXP, SEXP dbhSEXP, SEXP SpParamsSEXP, SEXP gddSEXP, SEXP includeDeadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    Rcpp::traits::input_parameter< bool >::type includeDead(includeDeadSEXP);
    rcpp_result_gen = Rcpp::wrap(treeFuel(SP, N, dbh, SpParams, gdd, includeDead));
    return rcpp_result_gen;
END_RCPP
}
// shrubFuel
NumericVector shrubFuel(IntegerVector SP, NumericVector Cover, NumericVector H, NumericVector CR, DataFrame SpParams, double gdd, bool includeDead);
RcppExport SEXP medfate_shrubFuel(SEXP SPSEXP, SEXP CoverSEXP, SEXP HSEXP, SEXP CRSEXP, SEXP SpParamsSEXP, SEXP gddSEXP, SEXP includeDeadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cover(CoverSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    Rcpp::traits::input_parameter< bool >::type includeDead(includeDeadSEXP);
    rcpp_result_gen = Rcpp::wrap(shrubFuel(SP, Cover, H, CR, SpParams, gdd, includeDead));
    return rcpp_result_gen;
END_RCPP
}
// cohortFuel
NumericVector cohortFuel(List x, DataFrame SpParams, double gdd, bool includeDead);
RcppExport SEXP medfate_cohortFuel(SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP, SEXP includeDeadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    Rcpp::traits::input_parameter< bool >::type includeDead(includeDeadSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortFuel(x, SpParams, gdd, includeDead));
    return rcpp_result_gen;
END_RCPP
}
// cohortEquilibriumLeafLitter
NumericVector cohortEquilibriumLeafLitter(List x, DataFrame SpParams, double AET);
RcppExport SEXP medfate_cohortEquilibriumLeafLitter(SEXP xSEXP, SEXP SpParamsSEXP, SEXP AETSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type AET(AETSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortEquilibriumLeafLitter(x, SpParams, AET));
    return rcpp_result_gen;
END_RCPP
}
// cohortEquilibriumSmallBranchLitter
NumericVector cohortEquilibriumSmallBranchLitter(List x, DataFrame SpParams, double smallBranchDecompositionRate);
RcppExport SEXP medfate_cohortEquilibriumSmallBranchLitter(SEXP xSEXP, SEXP SpParamsSEXP, SEXP smallBranchDecompositionRateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type smallBranchDecompositionRate(smallBranchDecompositionRateSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortEquilibriumSmallBranchLitter(x, SpParams, smallBranchDecompositionRate));
    return rcpp_result_gen;
END_RCPP
}
// treeLAI
NumericVector treeLAI(IntegerVector SP, NumericVector N, NumericVector dbh, DataFrame SpParams, double gdd);
RcppExport SEXP medfate_treeLAI(SEXP SPSEXP, SEXP NSEXP, SEXP dbhSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(treeLAI(SP, N, dbh, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// shrubLAI
NumericVector shrubLAI(IntegerVector SP, NumericVector Cover, NumericVector H, DataFrame SpParams, double gdd);
RcppExport SEXP medfate_shrubLAI(SEXP SPSEXP, SEXP CoverSEXP, SEXP HSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cover(CoverSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(shrubLAI(SP, Cover, H, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// cohortLAI
NumericVector cohortLAI(List x, DataFrame SpParams, double gdd);
RcppExport SEXP medfate_cohortLAI(SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortLAI(x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// LAIdistribution
NumericMatrix LAIdistribution(NumericVector z, List x, DataFrame SpParams, double gdd);
RcppExport SEXP medfate_LAIdistribution(SEXP zSEXP, SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(LAIdistribution(z, x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// LAIprofile
NumericVector LAIprofile(NumericVector z, List x, DataFrame SpParams, double gdd);
RcppExport SEXP medfate_LAIprofile(SEXP zSEXP, SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(LAIprofile(z, x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// swbInput
DataFrame swbInput(IntegerVector SP, NumericVector LAI, NumericVector H, NumericVector CR, NumericMatrix V, DataFrame SpParams, String petMode, String hydraulicMode);
RcppExport SEXP medfate_swbInput(SEXP SPSEXP, SEXP LAISEXP, SEXP HSEXP, SEXP CRSEXP, SEXP VSEXP, SEXP SpParamsSEXP, SEXP petModeSEXP, SEXP hydraulicModeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LAI(LAISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type V(VSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< String >::type petMode(petModeSEXP);
    Rcpp::traits::input_parameter< String >::type hydraulicMode(hydraulicModeSEXP);
    rcpp_result_gen = Rcpp::wrap(swbInput(SP, LAI, H, CR, V, SpParams, petMode, hydraulicMode));
    return rcpp_result_gen;
END_RCPP
}
// forest2swbInput
DataFrame forest2swbInput(List x, DataFrame SpParams, NumericVector d, double gdd, String petMode, String hydraulicMode);
RcppExport SEXP medfate_forest2swbInput(SEXP xSEXP, SEXP SpParamsSEXP, SEXP dSEXP, SEXP gddSEXP, SEXP petModeSEXP, SEXP hydraulicModeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    Rcpp::traits::input_parameter< String >::type petMode(petModeSEXP);
    Rcpp::traits::input_parameter< String >::type hydraulicMode(hydraulicModeSEXP);
    rcpp_result_gen = Rcpp::wrap(forest2swbInput(x, SpParams, d, gdd, petMode, hydraulicMode));
    return rcpp_result_gen;
END_RCPP
}
// fuelConditions
NumericVector fuelConditions(double airTemp, double airHumidity, double fuelRadiation, double fuelWindSpeed);
RcppExport SEXP medfate_fuelConditions(SEXP airTempSEXP, SEXP airHumiditySEXP, SEXP fuelRadiationSEXP, SEXP fuelWindSpeedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type airTemp(airTempSEXP);
    Rcpp::traits::input_parameter< double >::type airHumidity(airHumiditySEXP);
    Rcpp::traits::input_parameter< double >::type fuelRadiation(fuelRadiationSEXP);
    Rcpp::traits::input_parameter< double >::type fuelWindSpeed(fuelWindSpeedSEXP);
    rcpp_result_gen = Rcpp::wrap(fuelConditions(airTemp, airHumidity, fuelRadiation, fuelWindSpeed));
    return rcpp_result_gen;
END_RCPP
}
// EMCdesorption
double EMCdesorption(double fuelTemperature, double fuelHumidity);
RcppExport SEXP medfate_EMCdesorption(SEXP fuelTemperatureSEXP, SEXP fuelHumiditySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type fuelTemperature(fuelTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type fuelHumidity(fuelHumiditySEXP);
    rcpp_result_gen = Rcpp::wrap(EMCdesorption(fuelTemperature, fuelHumidity));
    return rcpp_result_gen;
END_RCPP
}
// EMCadsorption
double EMCadsorption(double fuelTemperature, double fuelHumidity);
RcppExport SEXP medfate_EMCadsorption(SEXP fuelTemperatureSEXP, SEXP fuelHumiditySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type fuelTemperature(fuelTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type fuelHumidity(fuelHumiditySEXP);
    rcpp_result_gen = Rcpp::wrap(EMCadsorption(fuelTemperature, fuelHumidity));
    return rcpp_result_gen;
END_RCPP
}
// EMCSimard
double EMCSimard(double fuelTemperature, double fuelHumidity);
RcppExport SEXP medfate_EMCSimard(SEXP fuelTemperatureSEXP, SEXP fuelHumiditySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type fuelTemperature(fuelTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type fuelHumidity(fuelHumiditySEXP);
    rcpp_result_gen = Rcpp::wrap(EMCSimard(fuelTemperature, fuelHumidity));
    return rcpp_result_gen;
END_RCPP
}
// woodyFuelProfile
NumericVector woodyFuelProfile(NumericVector z, List x, DataFrame SpParams, double gdd);
RcppExport SEXP medfate_woodyFuelProfile(SEXP zSEXP, SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(woodyFuelProfile(z, x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// layerCohortFuelLoading
NumericVector layerCohortFuelLoading(double minHeight, double maxHeight, NumericVector cohortLoading, NumericVector H, NumericVector CR);
RcppExport SEXP medfate_layerCohortFuelLoading(SEXP minHeightSEXP, SEXP maxHeightSEXP, SEXP cohortLoadingSEXP, SEXP HSEXP, SEXP CRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type minHeight(minHeightSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeight(maxHeightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cohortLoading(cohortLoadingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    rcpp_result_gen = Rcpp::wrap(layerCohortFuelLoading(minHeight, maxHeight, cohortLoading, H, CR));
    return rcpp_result_gen;
END_RCPP
}
// layerFuelLoading
double layerFuelLoading(double minHeight, double maxHeight, NumericVector cohortLoading, NumericVector H, NumericVector CR);
RcppExport SEXP medfate_layerFuelLoading(SEXP minHeightSEXP, SEXP maxHeightSEXP, SEXP cohortLoadingSEXP, SEXP HSEXP, SEXP CRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type minHeight(minHeightSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeight(maxHeightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cohortLoading(cohortLoadingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    rcpp_result_gen = Rcpp::wrap(layerFuelLoading(minHeight, maxHeight, cohortLoading, H, CR));
    return rcpp_result_gen;
END_RCPP
}
// layerLAI
double layerLAI(double minHeight, double maxHeight, NumericVector cohortLAI, NumericVector H, NumericVector CR);
RcppExport SEXP medfate_layerLAI(SEXP minHeightSEXP, SEXP maxHeightSEXP, SEXP cohortLAISEXP, SEXP HSEXP, SEXP CRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type minHeight(minHeightSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeight(maxHeightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cohortLAI(cohortLAISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    rcpp_result_gen = Rcpp::wrap(layerLAI(minHeight, maxHeight, cohortLAI, H, CR));
    return rcpp_result_gen;
END_RCPP
}
// layerFuelAverageSpeciesParameter
double layerFuelAverageSpeciesParameter(String spParName, double minHeight, double maxHeight, List x, DataFrame SpParams, double gdd);
RcppExport SEXP medfate_layerFuelAverageSpeciesParameter(SEXP spParNameSEXP, SEXP minHeightSEXP, SEXP maxHeightSEXP, SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type spParName(spParNameSEXP);
    Rcpp::traits::input_parameter< double >::type minHeight(minHeightSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeight(maxHeightSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(layerFuelAverageSpeciesParameter(spParName, minHeight, maxHeight, x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// layerFuelAverageParameter
double layerFuelAverageParameter(double minHeight, double maxHeight, NumericVector cohortParameter, NumericVector cohortLoading, NumericVector H, NumericVector CR);
RcppExport SEXP medfate_layerFuelAverageParameter(SEXP minHeightSEXP, SEXP maxHeightSEXP, SEXP cohortParameterSEXP, SEXP cohortLoadingSEXP, SEXP HSEXP, SEXP CRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type minHeight(minHeightSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeight(maxHeightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cohortParameter(cohortParameterSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cohortLoading(cohortLoadingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    rcpp_result_gen = Rcpp::wrap(layerFuelAverageParameter(minHeight, maxHeight, cohortParameter, cohortLoading, H, CR));
    return rcpp_result_gen;
END_RCPP
}
// layerFuelAverageCrownLength
double layerFuelAverageCrownLength(double minHeight, double maxHeight, NumericVector cohortCrownLength, NumericVector cohortLoading, NumericVector H, NumericVector CR);
RcppExport SEXP medfate_layerFuelAverageCrownLength(SEXP minHeightSEXP, SEXP maxHeightSEXP, SEXP cohortCrownLengthSEXP, SEXP cohortLoadingSEXP, SEXP HSEXP, SEXP CRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type minHeight(minHeightSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeight(maxHeightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cohortCrownLength(cohortCrownLengthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cohortLoading(cohortLoadingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    rcpp_result_gen = Rcpp::wrap(layerFuelAverageCrownLength(minHeight, maxHeight, cohortCrownLength, cohortLoading, H, CR));
    return rcpp_result_gen;
END_RCPP
}
// fuelLiveStratification
List fuelLiveStratification(List object, DataFrame SpParams, double gdd, double heightProfileStep, double maxHeightProfile, double bulkDensityThreshold);
RcppExport SEXP medfate_fuelLiveStratification(SEXP objectSEXP, SEXP SpParamsSEXP, SEXP gddSEXP, SEXP heightProfileStepSEXP, SEXP maxHeightProfileSEXP, SEXP bulkDensityThresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    Rcpp::traits::input_parameter< double >::type heightProfileStep(heightProfileStepSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeightProfile(maxHeightProfileSEXP);
    Rcpp::traits::input_parameter< double >::type bulkDensityThreshold(bulkDensityThresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(fuelLiveStratification(object, SpParams, gdd, heightProfileStep, maxHeightProfile, bulkDensityThreshold));
    return rcpp_result_gen;
END_RCPP
}
// FCCSproperties
DataFrame FCCSproperties(List object, double ShrubCover, double CanopyCover, DataFrame SpParams, double gdd, double heightProfileStep, double maxHeightProfile, double bulkDensityThreshold);
RcppExport SEXP medfate_FCCSproperties(SEXP objectSEXP, SEXP ShrubCoverSEXP, SEXP CanopyCoverSEXP, SEXP SpParamsSEXP, SEXP gddSEXP, SEXP heightProfileStepSEXP, SEXP maxHeightProfileSEXP, SEXP bulkDensityThresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< double >::type ShrubCover(ShrubCoverSEXP);
    Rcpp::traits::input_parameter< double >::type CanopyCover(CanopyCoverSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    Rcpp::traits::input_parameter< double >::type heightProfileStep(heightProfileStepSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeightProfile(maxHeightProfileSEXP);
    Rcpp::traits::input_parameter< double >::type bulkDensityThreshold(bulkDensityThresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(FCCSproperties(object, ShrubCover, CanopyCover, SpParams, gdd, heightProfileStep, maxHeightProfile, bulkDensityThreshold));
    return rcpp_result_gen;
END_RCPP
}
// gammds
double gammds(double x, double p);
RcppExport SEXP medfate_gammds(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(gammds(x, p));
    return rcpp_result_gen;
END_RCPP
}
// Egamma
double Egamma(double psi, double kxmax, double c, double d);
RcppExport SEXP medfate_Egamma(SEXP psiSEXP, SEXP kxmaxSEXP, SEXP cSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type kxmax(kxmaxSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(Egamma(psi, kxmax, c, d));
    return rcpp_result_gen;
END_RCPP
}
// EXylem
double EXylem(double psiPlant, double psiUpstream, double kxmax, double c, double d);
RcppExport SEXP medfate_EXylem(SEXP psiPlantSEXP, SEXP psiUpstreamSEXP, SEXP kxmaxSEXP, SEXP cSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type psiPlant(psiPlantSEXP);
    Rcpp::traits::input_parameter< double >::type psiUpstream(psiUpstreamSEXP);
    Rcpp::traits::input_parameter< double >::type kxmax(kxmaxSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(EXylem(psiPlant, psiUpstream, kxmax, c, d));
    return rcpp_result_gen;
END_RCPP
}
// xylemConductance
double xylemConductance(double psi, double kxmax, double c, double d);
RcppExport SEXP medfate_xylemConductance(SEXP psiSEXP, SEXP kxmaxSEXP, SEXP cSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type kxmax(kxmaxSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(xylemConductance(psi, kxmax, c, d));
    return rcpp_result_gen;
END_RCPP
}
// psiCrit
double psiCrit(double c, double d);
RcppExport SEXP medfate_psiCrit(SEXP cSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(psiCrit(c, d));
    return rcpp_result_gen;
END_RCPP
}
// E2psiXylem
double E2psiXylem(double E, double psiUpstream, double kxmax, double c, double d, double psiStep, double psiMax);
RcppExport SEXP medfate_E2psiXylem(SEXP ESEXP, SEXP psiUpstreamSEXP, SEXP kxmaxSEXP, SEXP cSEXP, SEXP dSEXP, SEXP psiStepSEXP, SEXP psiMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type psiUpstream(psiUpstreamSEXP);
    Rcpp::traits::input_parameter< double >::type kxmax(kxmaxSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type psiStep(psiStepSEXP);
    Rcpp::traits::input_parameter< double >::type psiMax(psiMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(E2psiXylem(E, psiUpstream, kxmax, c, d, psiStep, psiMax));
    return rcpp_result_gen;
END_RCPP
}
// Ecrit
double Ecrit(double psiUpstream, double kxmax, double c, double d);
RcppExport SEXP medfate_Ecrit(SEXP psiUpstreamSEXP, SEXP kxmaxSEXP, SEXP cSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type psiUpstream(psiUpstreamSEXP);
    Rcpp::traits::input_parameter< double >::type kxmax(kxmaxSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(Ecrit(psiUpstream, kxmax, c, d));
    return rcpp_result_gen;
END_RCPP
}
// regulatedPsiXylem
NumericVector regulatedPsiXylem(double E, double psiUpstream, double kxmax, double c, double d, double psiStep);
RcppExport SEXP medfate_regulatedPsiXylem(SEXP ESEXP, SEXP psiUpstreamSEXP, SEXP kxmaxSEXP, SEXP cSEXP, SEXP dSEXP, SEXP psiStepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type psiUpstream(psiUpstreamSEXP);
    Rcpp::traits::input_parameter< double >::type kxmax(kxmaxSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type psiStep(psiStepSEXP);
    rcpp_result_gen = Rcpp::wrap(regulatedPsiXylem(E, psiUpstream, kxmax, c, d, psiStep));
    return rcpp_result_gen;
END_RCPP
}
// vanGenuchtenConductance
double vanGenuchtenConductance(double psi, double ksmax, double n, double alpha);
RcppExport SEXP medfate_vanGenuchtenConductance(SEXP psiSEXP, SEXP ksmaxSEXP, SEXP nSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type ksmax(ksmaxSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(vanGenuchtenConductance(psi, ksmax, n, alpha));
    return rcpp_result_gen;
END_RCPP
}
// E2psiVanGenuchten
double E2psiVanGenuchten(double E, double psiSoil, double ksmax, double n, double alpha, double psiStep, double psiMax);
RcppExport SEXP medfate_E2psiVanGenuchten(SEXP ESEXP, SEXP psiSoilSEXP, SEXP ksmaxSEXP, SEXP nSEXP, SEXP alphaSEXP, SEXP psiStepSEXP, SEXP psiMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type psiSoil(psiSoilSEXP);
    Rcpp::traits::input_parameter< double >::type ksmax(ksmaxSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type psiStep(psiStepSEXP);
    Rcpp::traits::input_parameter< double >::type psiMax(psiMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(E2psiVanGenuchten(E, psiSoil, ksmax, n, alpha, psiStep, psiMax));
    return rcpp_result_gen;
END_RCPP
}
// E2psiTwoElements
double E2psiTwoElements(double E, double psiSoil, double ksmax, double kxmax, double n, double alpha, double c, double d, double psiStep, double psiMax);
RcppExport SEXP medfate_E2psiTwoElements(SEXP ESEXP, SEXP psiSoilSEXP, SEXP ksmaxSEXP, SEXP kxmaxSEXP, SEXP nSEXP, SEXP alphaSEXP, SEXP cSEXP, SEXP dSEXP, SEXP psiStepSEXP, SEXP psiMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type psiSoil(psiSoilSEXP);
    Rcpp::traits::input_parameter< double >::type ksmax(ksmaxSEXP);
    Rcpp::traits::input_parameter< double >::type kxmax(kxmaxSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type psiStep(psiStepSEXP);
    Rcpp::traits::input_parameter< double >::type psiMax(psiMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(E2psiTwoElements(E, psiSoil, ksmax, kxmax, n, alpha, c, d, psiStep, psiMax));
    return rcpp_result_gen;
END_RCPP
}
// supplyFunction
List supplyFunction(double Emax, double psiSoil, double ksmax, double kxmax, double n, double alpha, double c, double d, double dE, double psiMax);
RcppExport SEXP medfate_supplyFunction(SEXP EmaxSEXP, SEXP psiSoilSEXP, SEXP ksmaxSEXP, SEXP kxmaxSEXP, SEXP nSEXP, SEXP alphaSEXP, SEXP cSEXP, SEXP dSEXP, SEXP dESEXP, SEXP psiMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Emax(EmaxSEXP);
    Rcpp::traits::input_parameter< double >::type psiSoil(psiSoilSEXP);
    Rcpp::traits::input_parameter< double >::type ksmax(ksmaxSEXP);
    Rcpp::traits::input_parameter< double >::type kxmax(kxmaxSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type dE(dESEXP);
    Rcpp::traits::input_parameter< double >::type psiMax(psiMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(supplyFunction(Emax, psiSoil, ksmax, kxmax, n, alpha, c, d, dE, psiMax));
    return rcpp_result_gen;
END_RCPP
}
// regulatedPsiTwoElements
NumericVector regulatedPsiTwoElements(double Emax, double psiSoil, double ksmax, double kxmax, double n, double alpha, double c, double d, double dE, double psiMax);
RcppExport SEXP medfate_regulatedPsiTwoElements(SEXP EmaxSEXP, SEXP psiSoilSEXP, SEXP ksmaxSEXP, SEXP kxmaxSEXP, SEXP nSEXP, SEXP alphaSEXP, SEXP cSEXP, SEXP dSEXP, SEXP dESEXP, SEXP psiMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Emax(EmaxSEXP);
    Rcpp::traits::input_parameter< double >::type psiSoil(psiSoilSEXP);
    Rcpp::traits::input_parameter< double >::type ksmax(ksmaxSEXP);
    Rcpp::traits::input_parameter< double >::type kxmax(kxmaxSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type dE(dESEXP);
    Rcpp::traits::input_parameter< double >::type psiMax(psiMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(regulatedPsiTwoElements(Emax, psiSoil, ksmax, kxmax, n, alpha, c, d, dE, psiMax));
    return rcpp_result_gen;
END_RCPP
}
// parcohort
NumericVector parcohort(IntegerVector SP, NumericVector H, NumericVector CR, NumericVector LAI, DataFrame SpParams);
RcppExport SEXP medfate_parcohort(SEXP SPSEXP, SEXP HSEXP, SEXP CRSEXP, SEXP LAISEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LAI(LAISEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(parcohort(SP, H, CR, LAI, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// parheight
NumericVector parheight(NumericVector heights, IntegerVector SP, NumericVector H, NumericVector CR, NumericVector LAI, DataFrame SpParams);
RcppExport SEXP medfate_parheight(SEXP heightsSEXP, SEXP SPSEXP, SEXP HSEXP, SEXP CRSEXP, SEXP LAISEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type heights(heightsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LAI(LAISEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(parheight(heights, SP, H, CR, LAI, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// swrheight
NumericVector swrheight(NumericVector heights, IntegerVector SP, NumericVector H, NumericVector CR, NumericVector LAI, DataFrame SpParams);
RcppExport SEXP medfate_swrheight(SEXP heightsSEXP, SEXP SPSEXP, SEXP HSEXP, SEXP CRSEXP, SEXP LAISEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type heights(heightsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LAI(LAISEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(swrheight(heights, SP, H, CR, LAI, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// parExtinctionProfile
NumericVector parExtinctionProfile(NumericVector z, List x, DataFrame SpParams, double gdd);
RcppExport SEXP medfate_parExtinctionProfile(SEXP zSEXP, SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(parExtinctionProfile(z, x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// swrExtinctionProfile
NumericVector swrExtinctionProfile(NumericVector z, List x, DataFrame SpParams, double gdd);
RcppExport SEXP medfate_swrExtinctionProfile(SEXP zSEXP, SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(swrExtinctionProfile(z, x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// cohortAbsorbedSWRFraction
NumericVector cohortAbsorbedSWRFraction(NumericVector z, List x, DataFrame SpParams, double gdd);
RcppExport SEXP medfate_cohortAbsorbedSWRFraction(SEXP zSEXP, SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortAbsorbedSWRFraction(z, x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// PenmanMonteithPET
double PenmanMonteithPET(double rc, double elevation, double Tmin, double Tmax, double RHmin, double RHmax, double Rn, double u);
RcppExport SEXP medfate_PenmanMonteithPET(SEXP rcSEXP, SEXP elevationSEXP, SEXP TminSEXP, SEXP TmaxSEXP, SEXP RHminSEXP, SEXP RHmaxSEXP, SEXP RnSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rc(rcSEXP);
    Rcpp::traits::input_parameter< double >::type elevation(elevationSEXP);
    Rcpp::traits::input_parameter< double >::type Tmin(TminSEXP);
    Rcpp::traits::input_parameter< double >::type Tmax(TmaxSEXP);
    Rcpp::traits::input_parameter< double >::type RHmin(RHminSEXP);
    Rcpp::traits::input_parameter< double >::type RHmax(RHmaxSEXP);
    Rcpp::traits::input_parameter< double >::type Rn(RnSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(PenmanMonteithPET(rc, elevation, Tmin, Tmax, RHmin, RHmax, Rn, u));
    return rcpp_result_gen;
END_RCPP
}
// theta2psi
double theta2psi(double clay, double sand, double theta);
RcppExport SEXP medfate_theta2psi(SEXP claySEXP, SEXP sandSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type clay(claySEXP);
    Rcpp::traits::input_parameter< double >::type sand(sandSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(theta2psi(clay, sand, theta));
    return rcpp_result_gen;
END_RCPP
}
// psi2theta
double psi2theta(double clay, double sand, double psi);
RcppExport SEXP medfate_psi2theta(SEXP claySEXP, SEXP sandSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type clay(claySEXP);
    Rcpp::traits::input_parameter< double >::type sand(sandSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(psi2theta(clay, sand, psi));
    return rcpp_result_gen;
END_RCPP
}
// soilUSDAType
String soilUSDAType(double clay, double sand);
RcppExport SEXP medfate_soilUSDAType(SEXP claySEXP, SEXP sandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type clay(claySEXP);
    Rcpp::traits::input_parameter< double >::type sand(sandSEXP);
    rcpp_result_gen = Rcpp::wrap(soilUSDAType(clay, sand));
    return rcpp_result_gen;
END_RCPP
}
// vanGenuchtenParams
NumericVector vanGenuchtenParams(String soilType);
RcppExport SEXP medfate_vanGenuchtenParams(SEXP soilTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type soilType(soilTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(vanGenuchtenParams(soilType));
    return rcpp_result_gen;
END_RCPP
}
// soil
List soil(List SoilParams, NumericVector W);
RcppExport SEXP medfate_soil(SEXP SoilParamsSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type SoilParams(SoilParamsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(soil(SoilParams, W));
    return rcpp_result_gen;
END_RCPP
}
// er
NumericVector er(IntegerVector DOY, double ERconv, double ERsyn);
RcppExport SEXP medfate_er(SEXP DOYSEXP, SEXP ERconvSEXP, SEXP ERsynSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type DOY(DOYSEXP);
    Rcpp::traits::input_parameter< double >::type ERconv(ERconvSEXP);
    Rcpp::traits::input_parameter< double >::type ERsyn(ERsynSEXP);
    rcpp_result_gen = Rcpp::wrap(er(DOY, ERconv, ERsyn));
    return rcpp_result_gen;
END_RCPP
}
// gdd
NumericVector gdd(IntegerVector DOY, NumericVector Temp, double Tbase);
RcppExport SEXP medfate_gdd(SEXP DOYSEXP, SEXP TempSEXP, SEXP TbaseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type DOY(DOYSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Temp(TempSEXP);
    Rcpp::traits::input_parameter< double >::type Tbase(TbaseSEXP);
    rcpp_result_gen = Rcpp::wrap(gdd(DOY, Temp, Tbase));
    return rcpp_result_gen;
END_RCPP
}
// soilevaporation
double soilevaporation(double DEF, double PETs, double Gsoil);
RcppExport SEXP medfate_soilevaporation(SEXP DEFSEXP, SEXP PETsSEXP, SEXP GsoilSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type DEF(DEFSEXP);
    Rcpp::traits::input_parameter< double >::type PETs(PETsSEXP);
    Rcpp::traits::input_parameter< double >::type Gsoil(GsoilSEXP);
    rcpp_result_gen = Rcpp::wrap(soilevaporation(DEF, PETs, Gsoil));
    return rcpp_result_gen;
END_RCPP
}
// infiltrationDay
double infiltrationDay(double NetPrec, double Ssoil);
RcppExport SEXP medfate_infiltrationDay(SEXP NetPrecSEXP, SEXP SsoilSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type NetPrec(NetPrecSEXP);
    Rcpp::traits::input_parameter< double >::type Ssoil(SsoilSEXP);
    rcpp_result_gen = Rcpp::wrap(infiltrationDay(NetPrec, Ssoil));
    return rcpp_result_gen;
END_RCPP
}
// interceptionGashDay
double interceptionGashDay(double Precipitation, double Cm, double p, double ER);
RcppExport SEXP medfate_interceptionGashDay(SEXP PrecipitationSEXP, SEXP CmSEXP, SEXP pSEXP, SEXP ERSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Precipitation(PrecipitationSEXP);
    Rcpp::traits::input_parameter< double >::type Cm(CmSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type ER(ERSEXP);
    rcpp_result_gen = Rcpp::wrap(interceptionGashDay(Precipitation, Cm, p, ER));
    return rcpp_result_gen;
END_RCPP
}
// swbDay1
List swbDay1(DataFrame x, List soil, double gdd, double pet, double rain, double er, double runon, String hydraulicMode, bool verbose);
RcppExport SEXP medfate_swbDay1(SEXP xSEXP, SEXP soilSEXP, SEXP gddSEXP, SEXP petSEXP, SEXP rainSEXP, SEXP erSEXP, SEXP runonSEXP, SEXP hydraulicModeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type soil(soilSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    Rcpp::traits::input_parameter< double >::type pet(petSEXP);
    Rcpp::traits::input_parameter< double >::type rain(rainSEXP);
    Rcpp::traits::input_parameter< double >::type er(erSEXP);
    Rcpp::traits::input_parameter< double >::type runon(runonSEXP);
    Rcpp::traits::input_parameter< String >::type hydraulicMode(hydraulicModeSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(swbDay1(x, soil, gdd, pet, rain, er, runon, hydraulicMode, verbose));
    return rcpp_result_gen;
END_RCPP
}
// swbDay2
List swbDay2(DataFrame x, List soil, double gdd, double tmin, double tmax, double rhmin, double rhmax, double rad, double wind, double latitude, double elevation, int J, double rain, double er, double runon, String hydraulicMode);
RcppExport SEXP medfate_swbDay2(SEXP xSEXP, SEXP soilSEXP, SEXP gddSEXP, SEXP tminSEXP, SEXP tmaxSEXP, SEXP rhminSEXP, SEXP rhmaxSEXP, SEXP radSEXP, SEXP windSEXP, SEXP latitudeSEXP, SEXP elevationSEXP, SEXP JSEXP, SEXP rainSEXP, SEXP erSEXP, SEXP runonSEXP, SEXP hydraulicModeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type soil(soilSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    Rcpp::traits::input_parameter< double >::type tmin(tminSEXP);
    Rcpp::traits::input_parameter< double >::type tmax(tmaxSEXP);
    Rcpp::traits::input_parameter< double >::type rhmin(rhminSEXP);
    Rcpp::traits::input_parameter< double >::type rhmax(rhmaxSEXP);
    Rcpp::traits::input_parameter< double >::type rad(radSEXP);
    Rcpp::traits::input_parameter< double >::type wind(windSEXP);
    Rcpp::traits::input_parameter< double >::type latitude(latitudeSEXP);
    Rcpp::traits::input_parameter< double >::type elevation(elevationSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< double >::type rain(rainSEXP);
    Rcpp::traits::input_parameter< double >::type er(erSEXP);
    Rcpp::traits::input_parameter< double >::type runon(runonSEXP);
    Rcpp::traits::input_parameter< String >::type hydraulicMode(hydraulicModeSEXP);
    rcpp_result_gen = Rcpp::wrap(swbDay2(x, soil, gdd, tmin, tmax, rhmin, rhmax, rad, wind, latitude, elevation, J, rain, er, runon, hydraulicMode));
    return rcpp_result_gen;
END_RCPP
}
// swbgridDay
List swbgridDay(CharacterVector lct, List xList, List soilList, IntegerVector waterO, List queenNeigh, List waterQ, NumericVector gddVec, NumericVector petVec, NumericVector rainVec, NumericVector erVec, NumericVector trackSpecies);
RcppExport SEXP medfate_swbgridDay(SEXP lctSEXP, SEXP xListSEXP, SEXP soilListSEXP, SEXP waterOSEXP, SEXP queenNeighSEXP, SEXP waterQSEXP, SEXP gddVecSEXP, SEXP petVecSEXP, SEXP rainVecSEXP, SEXP erVecSEXP, SEXP trackSpeciesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type lct(lctSEXP);
    Rcpp::traits::input_parameter< List >::type xList(xListSEXP);
    Rcpp::traits::input_parameter< List >::type soilList(soilListSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type waterO(waterOSEXP);
    Rcpp::traits::input_parameter< List >::type queenNeigh(queenNeighSEXP);
    Rcpp::traits::input_parameter< List >::type waterQ(waterQSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gddVec(gddVecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type petVec(petVecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rainVec(rainVecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type erVec(erVecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trackSpecies(trackSpeciesSEXP);
    rcpp_result_gen = Rcpp::wrap(swbgridDay(lct, xList, soilList, waterO, queenNeigh, waterQ, gddVec, petVec, rainVec, erVec, trackSpecies));
    return rcpp_result_gen;
END_RCPP
}
// swb
List swb(DataFrame x, List soil, DataFrame meteo, String petMode, String hydraulicMode, double latitude, double elevation, bool verbose);
RcppExport SEXP medfate_swb(SEXP xSEXP, SEXP soilSEXP, SEXP meteoSEXP, SEXP petModeSEXP, SEXP hydraulicModeSEXP, SEXP latitudeSEXP, SEXP elevationSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type soil(soilSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type meteo(meteoSEXP);
    Rcpp::traits::input_parameter< String >::type petMode(petModeSEXP);
    Rcpp::traits::input_parameter< String >::type hydraulicMode(hydraulicModeSEXP);
    Rcpp::traits::input_parameter< double >::type latitude(latitudeSEXP);
    Rcpp::traits::input_parameter< double >::type elevation(elevationSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(swb(x, soil, meteo, petMode, hydraulicMode, latitude, elevation, verbose));
    return rcpp_result_gen;
END_RCPP
}
// windSpeedAtCanopyHeight
double windSpeedAtCanopyHeight(double wind20H, double canopyHeight);
RcppExport SEXP medfate_windSpeedAtCanopyHeight(SEXP wind20HSEXP, SEXP canopyHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type wind20H(wind20HSEXP);
    Rcpp::traits::input_parameter< double >::type canopyHeight(canopyHeightSEXP);
    rcpp_result_gen = Rcpp::wrap(windSpeedAtCanopyHeight(wind20H, canopyHeight));
    return rcpp_result_gen;
END_RCPP
}
// unshelteredMidflameWindSpeed
double unshelteredMidflameWindSpeed(double wind20H, double fuelBedHeight);
RcppExport SEXP medfate_unshelteredMidflameWindSpeed(SEXP wind20HSEXP, SEXP fuelBedHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type wind20H(wind20HSEXP);
    Rcpp::traits::input_parameter< double >::type fuelBedHeight(fuelBedHeightSEXP);
    rcpp_result_gen = Rcpp::wrap(unshelteredMidflameWindSpeed(wind20H, fuelBedHeight));
    return rcpp_result_gen;
END_RCPP
}
// shelteredMidflameWindSpeed
double shelteredMidflameWindSpeed(double wind20H, double crownFillProportion, double topCanopyHeight);
RcppExport SEXP medfate_shelteredMidflameWindSpeed(SEXP wind20HSEXP, SEXP crownFillProportionSEXP, SEXP topCanopyHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type wind20H(wind20HSEXP);
    Rcpp::traits::input_parameter< double >::type crownFillProportion(crownFillProportionSEXP);
    Rcpp::traits::input_parameter< double >::type topCanopyHeight(topCanopyHeightSEXP);
    rcpp_result_gen = Rcpp::wrap(shelteredMidflameWindSpeed(wind20H, crownFillProportion, topCanopyHeight));
    return rcpp_result_gen;
END_RCPP
}
// windAdjustmentFactor
double windAdjustmentFactor(double topShrubHeight, double bottomCanopyHeight, double topCanopyHeight, double canopyCover);
RcppExport SEXP medfate_windAdjustmentFactor(SEXP topShrubHeightSEXP, SEXP bottomCanopyHeightSEXP, SEXP topCanopyHeightSEXP, SEXP canopyCoverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type topShrubHeight(topShrubHeightSEXP);
    Rcpp::traits::input_parameter< double >::type bottomCanopyHeight(bottomCanopyHeightSEXP);
    Rcpp::traits::input_parameter< double >::type topCanopyHeight(topCanopyHeightSEXP);
    Rcpp::traits::input_parameter< double >::type canopyCover(canopyCoverSEXP);
    rcpp_result_gen = Rcpp::wrap(windAdjustmentFactor(topShrubHeight, bottomCanopyHeight, topCanopyHeight, canopyCover));
    return rcpp_result_gen;
END_RCPP
}
// windSpeedAtHeightOverCanopy
double windSpeedAtHeightOverCanopy(double z, double wind20H, double canopyHeight);
RcppExport SEXP medfate_windSpeedAtHeightOverCanopy(SEXP zSEXP, SEXP wind20HSEXP, SEXP canopyHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type wind20H(wind20HSEXP);
    Rcpp::traits::input_parameter< double >::type canopyHeight(canopyHeightSEXP);
    rcpp_result_gen = Rcpp::wrap(windSpeedAtHeightOverCanopy(z, wind20H, canopyHeight));
    return rcpp_result_gen;
END_RCPP
}
// windExtinctionProfile
NumericVector windExtinctionProfile(NumericVector z, double wind20H, double LAIc, double canopyHeight);
RcppExport SEXP medfate_windExtinctionProfile(SEXP zSEXP, SEXP wind20HSEXP, SEXP LAIcSEXP, SEXP canopyHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type wind20H(wind20HSEXP);
    Rcpp::traits::input_parameter< double >::type LAIc(LAIcSEXP);
    Rcpp::traits::input_parameter< double >::type canopyHeight(canopyHeightSEXP);
    rcpp_result_gen = Rcpp::wrap(windExtinctionProfile(z, wind20H, LAIc, canopyHeight));
    return rcpp_result_gen;
END_RCPP
}
